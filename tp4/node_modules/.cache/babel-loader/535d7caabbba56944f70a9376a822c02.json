{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/danie/Documents/ORT/NT2/TPs/TP4/tp4/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'src-components-http-usuarios',\n  props: [],\n  mounted: function mounted() {},\n  data: function data() {\n    return {\n      url: \"https://6284336ba48bd3c40b6c2bf9.mockapi.io/Usuarios\",\n      posts: []\n    };\n  },\n  methods: {\n    wrappersXHRpromise: function wrappersXHRpromise() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"get\", _this.url);\n        xhr.addEventListener(\"load\", function () {\n          if (xhr.status == 200) {\n            var respuesta = JSON.parse(xhr.response);\n            resolve(respuesta);\n          }\n\n          xhr.addEventListener(\"error\", function (e) {\n            var error = {\n              title: \"Error xhr cb(status)\",\n              status: e\n            };\n            reject(error);\n          });\n        });\n        xhr.send();\n      });\n    },\n    getPostXHR: function getPostXHR() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var respuesta;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this2.wrappersXHRpromise();\n\n              case 3:\n                respuesta = _context.sent;\n                _this2.posts = respuesta;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(\"Error XHRPromise\", _context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  },\n  computed: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;EACAA,oCADA;EAEAC,SAFA;EAGAC,OAHA,qBAGA,CAEA,CALA;EAMAC,IANA,kBAMA;IACA;MACAC,2DADA;MAEAC;IAFA;EAIA,CAXA;EAYAC;IACAC,kBADA,gCACA;MAAA;;MACA;QACA;QACAC;QACAA;UACA;YACA;YACAC;UACA;;UACAD;YACA;cACAE,6BADA;cAEAC;YAFA;YAIAC;UACA,CANA;QAOA,CAZA;QAaAJ;MACA,CAjBA;IAkBA,CApBA;IAqBAK,UArBA,wBAqBA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA,2BAFA;;cAAA;gBAEAC,SAFA;gBAGA;gBAHA;gBAAA;;cAAA;gBAAA;gBAAA;gBAMAC;;cANA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQA;EA7BA,CAZA;EA2CAC;AA3CA","names":["name","props","mounted","data","url","posts","methods","wrappersXHRpromise","xhr","resolve","title","status","reject","getPostXHR","respuesta","console","computed"],"sourceRoot":"src/components","sources":["HttpUsuarios.vue"],"sourcesContent":["<template>\n\n  <section class=\"src-components-http-usuarios\">\n<div class=\"jumbotron\">\n<button class=\"btn btn-success my-3\" @click=\"getPostXHR()\">Pedir XHR</button>\n<div class=\"table-responsive\">\n  <table class=\"table table-dark\">\n    <tr>\n      <th>Nombre</th>\n      <th>Email</th>\n      <th>Telefono</th>\n    </tr>\n    <tr v-for=\"(post,index) in posts\" :key=\"index\">\n    <td>{{post.Nombre}}</td>\n    <td>{{post.Email}}</td>\n    <td>{{post.NroTelefono}}</td>\n    </tr>\n  </table> \n</div>\n</div>\n  </section>\n\n</template>\n\n<script>\n  export default  {\n    name: 'src-components-http-usuarios',\n    props: [],\n    mounted () {\n\n    },\n    data () {\n      return {\n        url:\"https://6284336ba48bd3c40b6c2bf9.mockapi.io/Usuarios\",\n        posts:[],\n      }\n    },\n    methods: {\n      wrappersXHRpromise(){\n        return new Promise((resolve,reject)=>{\n          const xhr = new XMLHttpRequest();\n          xhr.open(\"get\",this.url)\n          xhr.addEventListener(\"load\",()=>{\n            if(xhr.status==200){\n              let respuesta = JSON.parse(xhr.response);\n              resolve(respuesta);\n            } \n            xhr.addEventListener (\"error\",(e)=>{\n              let error = {\n                title: \"Error xhr cb(status)\", \n                status: e,\n              };\n            reject(error);\n            });\n          });\n          xhr.send();\n        });\n      },\n      async getPostXHR(){\n        try{\n          let respuesta = await this.wrappersXHRpromise();\n          this.posts = respuesta;\n        \n        } catch (error) {\n          console.log(\"Error XHRPromise\", error);\n        }\n      }\n    },\n    computed: {\n\n    }\n}\n\n\n</script>\n\n<style scoped lang=\"css\">\n  \n</style>\n"]},"metadata":{},"sourceType":"module"}